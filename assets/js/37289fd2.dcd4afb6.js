"use strict";(self.webpackChunkminima_docs=self.webpackChunkminima_docs||[]).push([[27],{6590:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>d,toc:()=>a});var i=n(5893),t=n(1151);const r={sidebar_position:3},o="Start a Private Node",d={id:"buildonminima/dapptutorial/startaprivatenode",title:"Start a Private Node",description:"For development purposes, it can be useful to run one or more private test nodes stimulating network traffic. Starting these nodes from Genesis will also give you 1 billion coins to test transactions with.",source:"@site/docs/buildonminima/dapptutorial/startaprivatenode.md",sourceDirName:"buildonminima/dapptutorial",slug:"/buildonminima/dapptutorial/startaprivatenode",permalink:"/docs/buildonminima/dapptutorial/startaprivatenode",draft:!1,unlisted:!1,editUrl:"https://github.com/minima-global/minidocs/docs/buildonminima/dapptutorial/startaprivatenode.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Pre-requisites",permalink:"/docs/buildonminima/dapptutorial/prerequisites"},next:{title:"MiniDapp Hub",permalink:"/docs/buildonminima/dapptutorial/accesshub"}},l={},a=[{value:"Optional start up parameters",id:"optional-start-up-parameters",level:4},{value:"General",id:"general",level:4},{value:"Folders",id:"folders",level:4},{value:"MiniDapp System (mds)",id:"minidapp-system-mds",level:4},{value:"RPC",id:"rpc",level:4},{value:"Test nodes",id:"test-nodes",level:4},{value:"Mobile",id:"mobile",level:4},{value:"Debugging",id:"debugging",level:4},{value:"Help",id:"help",level:4}];function c(e){const s={admonition:"admonition",code:"code",h1:"h1",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components},{Details:n}=s;return n||function(e,s){throw new Error("Expected "+(s?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.h1,{id:"start-a-private-node",children:"Start a Private Node"}),"\n",(0,i.jsx)(s.p,{children:"For development purposes, it can be useful to run one or more private test nodes stimulating network traffic. Starting these nodes from Genesis will also give you 1 billion coins to test transactions with."}),"\n",(0,i.jsx)(s.p,{children:"To start a private node from genesis:"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Node 1:"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"java -jar minima.jar -data minidata1 -basefolder minidata1 -test -nop2p -mdsenable -mdspassword INSERTNODE1PASSWORD -genesis\n"})}),"\n",(0,i.jsx)(s.p,{children:"This will start a node on the default ports of 9001-5."}),"\n",(0,i.jsx)(s.p,{children:"To create a second node to test transactions between two nodes"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Node 2:"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"java -jar minima.jar -data minidata2 -basefolder minidata2 -test -nop2p -clean -mdsenable -mdspassword INSERTNODE2PASSWORD -port 10001 -connect 127.0.0.1:9001\n"})}),"\n",(0,i.jsx)(s.p,{children:"If you need to quit Minima and wish to restart it without deleting old data, use:"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Node 1:"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"java -jar minima.jar -data minidata1 -basefolder minidata1 -test -nop2p -mdsenable -mdspassword INSERTNODE1PASSWORD\n"})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Node 2:"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"java -jar minima.jar -data minidata2 -basefolder minidata2 -test -nop2p -mdsenable -mdspassword INSERTNODE2PASSWORD -connect 127.0.0.1:9001\n"})}),"\n",(0,i.jsx)(s.admonition,{title:"Parameters used",type:"note",children:(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.code,{children:"-data [foldername/path]"})})," : the data folder where all the config files for this node are stored. Default is a hidden .minima folder under the user's home directory. If you want to specify a folder not in the user's home directory, you must use the complete path.",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.code,{children:"-basefolder [foldername/path]"})})," : specify a default file creation / backup / restore folder. Default is the user's home directory. Can be the same as the data folder provided.",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.code,{children:"-nop2p"})})," : Disable the automatic P2P system",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.code,{children:"-test"})})," : uses test parameters e.g. faster block times",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.code,{children:"-genesis"})})," : start the node from the genesis block (automatically uses -clean)",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.code,{children:"-mdsenable"})})," : start the MiniDapp system"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.code,{children:"-connect [ip:port]"})})," : Disable the automatic P2P system and create your own network by manually connecting to this list of host",":port",(0,i.jsx)("br",{})]}),"\n"]})}),"\n",(0,i.jsx)(s.h4,{id:"optional-start-up-parameters",children:"Optional start up parameters"}),"\n",(0,i.jsxs)(n,{children:[(0,i.jsx)("summary",{children:"Expand to see full list of start up parameters"}),(0,i.jsx)(s.p,{children:"The following start up parameters can optionally be specified when starting your node."}),(0,i.jsxs)(s.p,{children:["To add/remove parameters after a node has been started, you must ",(0,i.jsx)(s.code,{children:"quit"})," the node and restart it, adding/removing the required parameters."]}),(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"[]"})," square brackets indicate where an input is required, ",(0,i.jsx)(s.strong,{children:"the brackets should not be included."})]}),(0,i.jsx)(s.h4,{id:"general",children:"General"}),(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-clean"})," : CAREFUL! Clears existing data, starts a new fresh node. All coins will be lost.",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-port [port]"})," : specify the initial port for Minima to use. Range used will be the specified port +4. Default is 9001-9005.",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-host [ipaddress]"})," : specify the host IP",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-dbpassword [yourdbpassword]"})," : Main Wallet / SQL AES password - MUST be specified on first launch. ",(0,i.jsx)(s.strong,{children:"CANNOT be changed later."})," ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-allowallip"})," : Allow all IPs for Maxima / Networking. Local IPs won't be allowed otherwise.",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-archive"})," : Run an Archive node - store all archive data / the cascade to allow for resyncs from this node",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-daemon"})," : Run in daemon mode with no stdin input (if running Minima as a background service)",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-isclient"})," : Tells the P2P System that this node can't accept incoming connections",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-server"})," : Use Server settings - this node can accept incoming connections",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-desktop"})," : Use Desktop settings - this node can't accept incoming connections",(0,i.jsx)("br",{})]}),"\n"]}),(0,i.jsx)(s.h4,{id:"folders",children:"Folders"}),(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-data [foldername/path]"})," : the data folder where all the config files for this node are stored. Default is a hidden .minima folder under the user's home directory. If you want to specify a folder not in the user's home directory, you must use the complete path. ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-basefolder [foldername/path]"})," : specify a default file creation / backup / restore folder. Default is the user's home directory. Can be the same as the ",(0,i.jsx)(s.code,{children:"data"})," folder provided.",(0,i.jsx)("br",{})]}),"\n"]}),(0,i.jsx)(s.h4,{id:"minidapp-system-mds",children:"MiniDapp System (mds)"}),(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-mdsenable"})," : enable the MiniDapp System (default port 9003)",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-mdspassword [yourmdspassword]"})," : specify the mds login password ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-mdsinit [foldername/path]"})," : specify a folder of miniDAPPs",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-mdswrite [minidapp]"})," : give an initial miniDAPP WRITE access ",(0,i.jsx)("br",{})]}),"\n"]}),(0,i.jsx)(s.h4,{id:"rpc",children:"RPC"}),(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-rpcenable"})," : enable remote procedure call",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-rpcssl"})," : use Self Signed SSL cert to run RPC",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-rpcpassword [yourrpcpassword]"})," : set Basic Auth password for RPC calls ( Use with SSL / stunnel ). Only secure if used with SSL.",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-rpcclrf"})," : use CRLF at the end of the RPC headers (NodeJS)",(0,i.jsx)("br",{})]}),"\n"]}),(0,i.jsx)(s.h4,{id:"test-nodes",children:"Test nodes"}),(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-genesis"})," : start the node from the genesis block (automatically uses -clean)",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-test"})," : uses test parameters e.g. faster block times",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-connect [ip:port,ip:port]"})," : Disable the automatic P2P system and create your own network by manually connecting to this list of host",":port",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-nop2p"})," : Disable the automatic P2P system",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-noconnect"})," : Stops the P2P system from connecting to other nodes until it has been connected to",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-nosyncibd"})," : Do not sync IBD (for testing)",(0,i.jsx)("br",{})]}),"\n"]}),(0,i.jsx)(s.h4,{id:"mobile",children:"Mobile"}),(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-mobile"})," : Sets this device to a mobile device - used for metrics only",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-limitbandwidth"})," : Limit the amount sent for archive sync",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-noshutdownhook"})," : Do not use the shutdown hook (Android)",(0,i.jsx)("br",{})]}),"\n"]}),(0,i.jsx)(s.h4,{id:"debugging",children:"Debugging"}),(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-p2p-log-level-info"})," : Set the P2P log level to info",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-p2p-log-level-debug"})," : Set the P2P log level to debug"]}),"\n"]}),(0,i.jsx)(s.h4,{id:"help",children:"Help"}),(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-showparams"})," : Show relevant startup params on launch",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-help"})," : print help for the start up parameters"]}),"\n"]})]})]})}function h(e={}){const{wrapper:s}={...(0,t.a)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},1151:(e,s,n)=>{n.d(s,{Z:()=>d,a:()=>o});var i=n(7294);const t={},r=i.createContext(t);function o(e){const s=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(r.Provider,{value:s},e.children)}}}]);