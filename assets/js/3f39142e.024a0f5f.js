"use strict";(self.webpackChunkminima_docs=self.webpackChunkminima_docs||[]).push([[5157],{2048:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>l});var i=e(5893),o=e(1151);const s={sidebar_position:6},a="ELTOO Floating Coin",r={id:"buildonminima/txntutorial/layer2/eltoofloating",title:"ELTOO Floating Coin",description:"A floating coin is one that can be attached to any existing coin, as long as it has the same address, amount and tokenid, irrespective of the coinid.",source:"@site/docs/buildonminima/txntutorial/layer2/eltoofloating.md",sourceDirName:"buildonminima/txntutorial/layer2",slug:"/buildonminima/txntutorial/layer2/eltoofloating",permalink:"/docs/buildonminima/txntutorial/layer2/eltoofloating",draft:!1,unlisted:!1,editUrl:"https://github.com/minima-global/minidocs/docs/buildonminima/txntutorial/layer2/eltoofloating.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"ELTOO Pre-Coin Txn",permalink:"/docs/buildonminima/txntutorial/layer2/eltooprecoin"},next:{title:"Full ELTOO Sequence",permalink:"/docs/buildonminima/txntutorial/layer2/eltoofullsequence"}},d={},l=[];function c(n){const t={code:"code",h1:"h1",p:"p",pre:"pre",strong:"strong",...(0,o.a)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"eltoo-floating-coin",children:"ELTOO Floating Coin"}),"\n",(0,i.jsx)(t.p,{children:"A floating coin is one that can be attached to any existing coin, as long as it has the same address, amount and tokenid, irrespective of the coinid."}),"\n",(0,i.jsx)(t.p,{children:"Use a previous address and send funds to it.."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"send amount:2 address:0x921FC56E2948CCC51DB46525E459F1DB7331C65CC0E830FBC0E63CF273C6B592\n"})}),"\n",(0,i.jsxs)(t.p,{children:["You will now have a coin that can be used as a floating input. Use ",(0,i.jsx)(t.code,{children:"coins relevant:true"})," to see the details. ",(0,i.jsx)("br",{}),"\r\nIn the coin details ",(0,i.jsx)(t.code,{children:"floating"})," will be set to true."]}),"\n",(0,i.jsx)(t.p,{children:"Create a floating transaction that spends this coin.."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"txncreate id:floattxn\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"txnoutput id:floattxn address:0xFF amount:2\n"})}),"\n",(0,i.jsxs)(t.p,{children:["And this is the special bit, when defining an input coin use the ",(0,i.jsx)(t.code,{children:"floating"})," param. You could specify the coin using a coinid or with coindata (from a custom transaction) - but you can just specify the address, amount and tokenid, since it is a floating coin."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"txninput id:floattxn floating:true amount:2 address:0x921FC56E2948CCC51DB46525E459F1DB7331C65CC0E830FBC0E63CF273C6B592\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Now - you will see that in your custom transaction the coinid for that input is ",(0,i.jsx)(t.code,{children:"0x01"}),". This means it is special. It is not specified. It does not matter which coin you use - as long as address, amount and tokenid are the same."]}),"\n",(0,i.jsx)(t.p,{children:"Sign it to complete the transaction"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"txnsign id:floattxn publickey:auto\n"})}),"\n",(0,i.jsx)(t.p,{children:"Infact let's SPEND the old coin and output it to the same address."}),"\n",(0,i.jsxs)(t.p,{children:["In my ",(0,i.jsx)(t.code,{children:"coins relevant:true"})," I have only 2 coins.. The 2 minima floating one and the big one (left over from the billion). Importantly the floating 2 Minima coin is the latest - so it will be picked up first."]}),"\n",(0,i.jsx)(t.p,{children:"So - if you do (using the same address and amount)"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"send amount:2 address:0x09B9782AA11B0B1F3D658016E2FD1E120DC0619A7BCD4F4DA6A4D79F0C6A5783\n"})}),"\n",(0,i.jsx)(t.p,{children:"It will spend that coin, and create another coin - with a different coinid, but with the same address, amount and tokenid, still floating."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"coins relevant:true\n"})}),"\n",(0,i.jsx)(t.p,{children:"This will show the new coin with different coinid."}),"\n",(0,i.jsx)(t.p,{children:"We can now post the floating transaction we made, with a coin that has already been spent, and it will still work as it uses the NEW coin we just created."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"txnpost id:floattxn auto:true\n"})}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"BOOM."})," You just spent a floating coin.."]})]})}function h(n={}){const{wrapper:t}={...(0,o.a)(),...n.components};return t?(0,i.jsx)(t,{...n,children:(0,i.jsx)(c,{...n})}):c(n)}},1151:(n,t,e)=>{e.d(t,{Z:()=>r,a:()=>a});var i=e(7294);const o={},s=i.createContext(o);function a(n){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof n?n(t):{...t,...n}}),[t,n])}function r(n){let t;return t=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:a(n.components),i.createElement(s.Provider,{value:t},n.children)}}}]);